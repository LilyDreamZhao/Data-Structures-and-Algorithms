#注意,leetcode测量时间根本不准，同样代码测量的时间不同

#9. Palindrome Number  
#49% 太低了
class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if x < 0 or  (x % 10 == 0 and x != 0):
            return False;
        
        revertedNumber = 0;
        while x > revertedNumber: #依次提取个位翻转，提取到半位时候
            revertedNumber = revertedNumber * 10 + x % 10;
            x /= 10;
        
        return x == revertedNumber or x == revertedNumber/10;#/10是剔除奇数个位时候产生的中间位数字
        
#9. Palindrome Number
# 38.41% 时间复杂度虽然也是O(log10(,n)),同上，但是这里只要一位不同就立即退出了，但是Int只有10位，无法显示出优势，若是long long 也许速度能显示出来
class Solution:
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        for i in range(9,-1,-1):
            if x//pow(10,i):
                break
        n=pow(10,i)
        while n>1:
            if x//n!=x%10:
                return False
            x=x%n//10
            n=n//100

        return True
        
#9. Palindrome Number  
#others  但是用了整数转换字符串了，不符合要求
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        s=str(x)
        return s==s[::-1]
        
